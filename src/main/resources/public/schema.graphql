directive @auth(role : String!) on FIELD_DEFINITION

scalar Date
scalar LocalDate
scalar LocalDateTime
scalar LocalTime

schema {
    query: Query
    mutation: Mutation
}


#
# Queries
#
type Query {
    profile: Profile
    playgrounds: [Playground]
    playground(id: String!): Playground
    emailExists(emailAddress: String!): Boolean!
    totalVolunteers: Long
}

type Profile {
    id : String!
    username : String!
    emailAddress : String!
    notificationLevel : NotificationLevel!
}

enum NotificationLevel {
    NONE
    FULL
}

type Initiative {
    id : String!
    lng : Float
    lat : Float
    status: Status
    volunteerCount: Int
    volunteers: [Volunteer!]!
    jointChecklistItems: [String!]!
    ownChecklistItems: [String!]!
    lastUpdateTimestamp: Date!
}

type Playground {
    id : String!
    name : String!
    lng : Float
    lat : Float
    status: Status
    smokeFreeDate: LocalDate
    volunteerCount: Int
    votes: Int
    managers: [Manager!]!
    playgroundObservations: [PlaygroundObservation!]!
    volunteers: [Volunteer!]!
    jointChecklistItems: [String!]!
    ownChecklistItems: [String!]!
    lastUpdateTimestamp: Date!
}

enum Status {
    NOT_STARTED
    IN_PROGRESS
    FINISHED
}

type Manager {
    id : String!
    username : String!
}

type Volunteer {
    userId: String!
    userName: String!
}

type PlaygroundObservation {
    observerId: String!
    observerName: String!
    smokefree: Boolean!
    observationDate: LocalDate!
    comment: String!
}


#
# Mutations
#

type Mutation {

# Initiative
    joinInitiative(input: JoinInitiativeInput!): InputAcceptedResponse!
    updateChecklist(input: UpdateChecklistCommand!): InputAcceptedResponse!

# Playground
    createInitiative(input: CreateInitiativeInput!): InputAcceptedResponse!
    claimManagerRole(input: ClaimManagerRoleCommand!): InputAcceptedResponse!
    decideToBecomeSmokeFree(input: DecideToBecomeSmokeFreeCommand!): InputAcceptedResponse!
    commitToSmokeFreeDate(input: CommitToSmokeFreeDateCommand!): InputAcceptedResponse!
    recordPlaygroundObservation(input: RecordPlaygroundObservationCommand!): InputAcceptedResponse!

# User
    createUser(doesNotMatter: String!): InputAcceptedResponse!
    deleteUser(doesNotMatter: String!): InputAcceptedResponse!
    setNotificationPreferences(input: SetNotificationPreferencesCommand!): InputAcceptedResponse!
}

type InitiativeMutation {
    createInitiative(input: CreateInitiativeInput!): InputAcceptedResponse!
    joinInitiative(input: JoinInitiativeInput!): InputAcceptedResponse!
    updateChecklist(input: UpdateChecklistCommand!): InputAcceptedResponse!
}

type PlaygroundMutation {
    claimManagerRole(input: ClaimManagerRoleCommand!): InputAcceptedResponse!
    decideToBecomeSmokeFree(input: DecideToBecomeSmokeFreeCommand!): InputAcceptedResponse!
    commitToSmokeFreeDate(input: CommitToSmokeFreeDateCommand!): InputAcceptedResponse!
    recordPlaygroundObservation(input: RecordPlaygroundObservationCommand!): InputAcceptedResponse!
}

type UserMutation {
    createUser(doesNotMatter: String!): Profile!
    deleteUser(doesNotMatter: String!): InputAcceptedResponse!
}

type InputAcceptedResponse {
    id : String!
}

input CreateInitiativeInput {
    initiativeId: String!
    name: String!
    lat: Float!
    lng: Float!
}

input JoinInitiativeInput {
    initiativeId: String!
}

input DecideToBecomeSmokeFreeCommand {
    initiativeId: String!
}
input ClaimManagerRoleCommand {
    initiativeId: String!
}
input CommitToSmokeFreeDateCommand {
    initiativeId: String!
    smokeFreeDate: LocalDate!
}
input RecordPlaygroundObservationCommand {
    initiativeId: String!
    observer: String!
    smokefree: Boolean!
    comment: String!
}
input UpdateChecklistCommand {
    initiativeId: String!
    checklistItem: String!
    checked: Boolean!
}

input SetNotificationPreferencesCommand {
    userId: String!
    notificationLevel: NotificationLevel!
}
